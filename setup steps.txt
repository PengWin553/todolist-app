NOTE: Each setup step is divided into sections indicated by "===".

===========================================================================

Here's a clear, step-by-step guide to setting up and running Golang in Visual Studio Code:

1. Install Go
   - Go to https://go.dev/dl/
   - Download the installer for your operating system (Windows)
   - Run the installer
   - IMPORTANT: Check the option to "Add Go to PATH" during installation

2. Prepare Visual Studio Code
   - Open Visual Studio Code
   - Go to Extensions (Ctrl+Shift+X)
   - Search for "Go" 
   - Install the official "Go" extension by Go Team at Google

3. Reload VS Code
   - Press Ctrl + Shift + P
   - Type 'reload'
   - Select 'Developer: Reload Window'

4. Install Go Tools
   - Open Command Prompt or PowerShell
   - Run these commands:
     ```
     go install -v golang.org/x/tools/gopls@latest
     go install -v github.com/ramya-rao-a/go-outline@latest
     ```

5. Create Your First Go Project
   - Open VS Code
   - File > Open Folder (select or create a new project folder)
   - Create a new file named `hello-world.go`

6. Write Your First Go Program
   - In `hello-world.go`, type:
     ```go
     package main

     import "fmt"

     func main() {
         fmt.Println("Hello, World!")
     }
     ```

7. Run the Program
   - Option 1: Using VS Code Run Button
     - Look for the "Run" triangle (play button) at the top right of the editor
     - Click it to run the program
   - Option 2: Using Terminal
     - Open Terminal in VS Code (Terminal > New Terminal)
     - Type: `go run hello-world.go`

8. Troubleshooting
   - If you encounter any issues:
     - Ensure Go is in your system PATH
     - Restart VS Code
     - Check that Go tools are installed correctly
     - Look for any error messages in the VS Code output or terminal

Additional Tips:
- VS Code may prompt you to install additional Go tools when you open a Go file
- Accept these prompts to set up a complete development environment
- The Go extension provides features like:
  - Intellisense
  - Code navigation
  - Debugging support

===========================================================================

** Install go.mod **

1. Open your project folder
2. Run this command:
            go mod init github.com/<yourGithubName>/<yourGithubRepositoryYouWantToWorkWith>
   EXAMPLE: go mod init github.com/PengWin553/todolist-app

===========================================================================

** Install Fiber framework

1. Open your project folder
2. Run this command:
               go get -u github.com/gofiber/fiber/v2

===========================================================================

** Install Air - To auto-restart app when changes occur ** 

1. Open your project folder
2. Run this command: 
               go install github.com/air-verse/air@latest
3. Go to your project folder and create a file named 'air.toml'
3.1 Copy paste this into your air.toml file:
                                             root = "." # The root directory of the project
                                             tmp_dir = "tmp" # The temporary directory where air will store its temporary files

                                             [build] # The build configuration
                                             bin = "main" # The name of the binary file to be generated after building the project
                                             cmd = "go build -o {{.Output}} {{.Input}}" # The command to build the project
                                             exclude = ["tmp/*", "client/*"]  # Specifies the directories to be excluded from monitoring for changes
                                             include = ["**/*.go"] # Specifies the file patterns to be included for monitoring.
                                             ignore = ["tmp/*"] # Specifies the files or directories to be ignored when triggering a build.
                                             
4. Go to extensions and install 'Even Better TOML' by tamasfe
5. To use the auto reload, go to your command prompt and open the app
   Example:
            PS C:\Users\SECCA> cd Documents
            PS C:\Users\SECCA\Documents> cd "2024 systems"
            PS C:\Users\SECCA\Documents\2024 systems> cd todolist-app
            PS C:\Users\SECCA\Documents\2024 systems\todolist-app> air

===========================================================================

** Install Postman Extension **

1. Go to your extensions and install Postman by Postman
2. Go to https://identity.getpostman.com/signup?auth_challenge=320e7b895ea620fd9aa01b5ea7c8c50ae6ff65eb88614bcab4fa26afc43a00b3&auth_device=vscode_postman&auth_device_version=1.5.0
3. Sign in with your google account
4. Create a workspace
5. Create a collection in your workspace
6. Add request to your collection
   Ex (a get request) http://localhost:4000/
7. Download and install Postman Desktop Agent
8. Run the request

===========================================================================

** Running first Post Request in repo commit "feat: Create todo"
1. Add a post request in your collections named "CREATE A TODO"
2. Set it a a post request with the url http://localhost:4000/api/todos that matches what was in your Code
3. Select "raw" and JSON
4. In the body, type in something like below to create a todo:
      {
         "body":"task 1"
      }
4.1 This will be a sample response:
      {
         "id": 2,
         "completed": false,
         "body": "task 2"
      }

===========================================================================

** Install the godotenv package, which is a Go library used to load environment variables from a .env file into your application. **
1. Run this in your terminal:
            go get github.com/joho/godotenv
2. Create an .env file in your project folder
3. Setup MongoDb to complete the values in your .env file. The setup for the MongoDb is the next one right below this setup steps
   Your .env file:
                     PORT=5000
                     MONGODB_URI=<your_uri_goes_here>     
                     ENV=development

===========================================================================

** Setup MongoDb **
1. Go to https://cloud.mongodb.com/ and sign in for free 
2. Create an organization
3. Create a project
   3.1 Create a new project
   3.2 Name your new project like "todolist-app" (and set key and value the same like "todolist-app")
   3.3 Set yourself as project owner
4. Create a deployment
   4.1 Select the free-tier and set the default options selected
   4.2 Connect to cluster
   4.3 Choose a connection method
     - Select Drivers
     - Copy the string
     - Review and confirm
5. To prevent development errors, go to the Network Access on the sidebar
   5.1 Add new IP address
   5.2 Click "Allow access from anywhere"
6. Click the sidebar's "Database" option
   6.1 Select "Browse Collections"
   6.2 See that you have 0 Collections
7. Go to your project's terminal and type the following to get the mongo driver:
   go get go.mongodb.org/mongo-driver/mongo
8. The sample main.go code below should connect your to MongoDb Atlas:

package main

import (
	"context"
	"fmt"
	"log"
	"os"

	"github.com/joho/godotenv"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
)

// Define the structure of a Todo item
type Todo struct {
	ID        int    `json:"id" bson:"_id"` // Unique identifier for each Todo item (will be auto-assigned); bson (Binary Json) because mongo stores its data in the form of bson
	Completed bool   `json:"completed"`     // Indicates if the Todo is completed (true/false)
	Body      string `json:"body"`          // The content or description of the Todo
}

var collecton *mongo.Collection

func main() {
	fmt.Println("yellow, world")

	err := godotenv.Load(".env")
	if err != nil {
		log.Fatal("Error loading .env file:", err)
	}

	MONGODB_URI := os.Getenv("MONGODB_URI")
	clientOptions := options.Client().ApplyURI(MONGODB_URI)
	client, err := mongo.Connect(context.Background(), clientOptions)

	if err != nil {
		log.Fatal(err)
	}

	err = client.Ping(context.Background(), nil)

	if err != nil {
		log.Fatal(err)
	}

	fmt.Println("Connected to MONGODB Atlas")
}

===========================================================================

** SETUP REACT + TYPESCRIPT **
1. Open your project's terminal
2. Type:
       mkdir client 
3. Type: 
      cd client 
4. Type:
      create vite@latest .
5. Select REACT
6. Select TYPESCRIPT
7. Type:
      npm install
8. Type:
      npm run dev

===========================================================================

** SETUP TAILWIND CSS IN REACT WITH VITE**

1. Go to https://tailwindcss.com/
2. Press "Get Started"
3. Press "Docs" on the Navbar
4. Press "Framework Guides"
5. Press "Vite"
6. Follow the guidelines (start with #2)
=====
** SETUP PACKAGES tanstack, and types (for typescript) **

1. Go to your client and paste the following:
                                             npm install @tanstack/react-query
                                             npm install @types/react-query

===========================================================================

** Added CORS middleware **

1. Go to your server's terminal and type:
                                          go get github.com/gofiber/fiber/v2/middleware/cors

===========================================================================